// Generated by CoffeeScript 1.10.0
(function() {
  var checkDate, checkFileType, checkUser, fs, isCritical, writeLog;

  fs = require('fs');

  checkUser = (require('./usercheck.js')).checkUser;

  checkDate = (require("./datechecker.js")).checkDate;

  checkFileType = function(types, filename) {
    var flags, i, j, len, reg, res, type;
    res = false;
    for (j = 0, len = types.length; j < len; j++) {
      type = types[j];
      if (!res) {
        reg = "\\." + type + "$";
        flags = 'gi';
        reg = new RegExp(reg, flags);
        if (i = filename.search(reg) >= 0) {
          res = true;
        } else {
          res = false;
        }
      }
    }
    return res;
  };

  isCritical = function(data, critFTypes) {
    var event, filename;
    event = data.event;
    filename = data.filename;
    if (event === "CREATE" || event === "MODIFY" || event === "DELETE" || (event.search(/MOVE/) >= 0)) {
      return checkFileType(critFTypes, filename);
    } else {
      return false;
    }
  };

  writeLog = function(data, logPath, critFTypes) {
    var criticalLogFile, date, logFile, result, userName;
    data = JSON.parse(data);
    result = data.directory + "\t" + data.filename + "\t" + data.event + "\t" + data.date;
    logFile = logPath + "/watcher.log";
    criticalLogFile = logPath + "/critical.log";
    if (isCritical(data, critFTypes)) {
      date = checkDate();
      if (date !== null) {
        result = "\n---------" + date + "----------\n" + result;
      }
      userName = checkUser(data.directory + "/" + data.filename);
      if (userName) {
        result += " " + userName + "\n";
      } else {
        result += "\n";
      }
      fs.appendFile(criticalLogFile, result, function(err) {
        if (err) {
          throw err;
        }
      });
    }
    return fs.appendFile(logFile, result, function(err) {
      if (err) {
        throw err;
      }
    });
  };

  exports.writeLog = writeLog;

}).call(this);
